#cambio puerto
server.port=8080
# Configuración de RabbitMQ local
spring.rabbitmq.host=${SPRING_RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${SPRING_RABBITMQ_PORT:5672}
spring.rabbitmq.username=${SPRING_RABBITMQ_USERNAME:proof}
spring.rabbitmq.password=${SPRING_RABBITMQ_PASSWORD:Proof123!}
spring.rabbitmq.virtual-host=/

# Configuración de la base de datos (ejemplo con MySQL)
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/proof}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:proof}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:Proof123!}

# Crea las tablas solo si no existen. Si las tablas ya existen, las deja tal como están. Es la opción más común para crear tablas en caso de no existir.
spring.jpa.hibernate.ddl-auto=update
# Muestra las consultas
spring.jpa.show-sql=true
#Para producción: asegura que las tablas coinciden con las entidades, pero sin realizar ningún cambio en la base de datos.
#spring.jpa.hibernate.ddl-auto=validate
logging.level.org.springframework.amqp=DEBUG
logging.level.org.springframework.amqp.rabbit=DEBUG