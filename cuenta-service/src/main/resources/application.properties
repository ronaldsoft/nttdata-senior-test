# Configuración de RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=proof
spring.rabbitmq.password=Proof123!

# Configuraciones personalizadas de RabbitMQ
# rabbitmq.exchange=clienteExchange
# rabbitmq.routingkey=clienteRoutingKey
# rabbitmq.queue=clienteQueue

# Configuración de la base de datos (ejemplo con MySQL)
spring.datasource.url=jdbc:mysql://localhost:3306/proof
# Conexion para docker
# spring.datasource.url=jdbc:mysql://mysql:3306/proof
spring.datasource.username=proof
spring.datasource.password=Proof123!
# Crea las tablas solo si no existen. Si las tablas ya existen, las deja tal como están. Es la opción más común para crear tablas en caso de no existir.
spring.jpa.hibernate.ddl-auto=update
# Muestra las consultas
spring.jpa.show-sql=true
#Para producción: asegura que las tablas coinciden con las entidades, pero sin realizar ningún cambio en la base de datos.
#spring.jpa.hibernate.ddl-auto=validate